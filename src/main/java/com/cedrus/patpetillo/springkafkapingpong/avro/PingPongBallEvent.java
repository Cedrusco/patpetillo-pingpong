/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package com.cedrus.patpetillo.springkafkapingpong.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** Represents a Ping Pong Ball Event */
@org.apache.avro.specific.AvroGenerated
public class PingPongBallEvent extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2936841425358619206L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"PingPongBallEvent\",\"namespace\":\"com.cedrus.patpetillo.springkafkapingpong.avro\",\"doc\":\"Represents a Ping Pong Ball Event\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"currentTeamWithBall\",\"type\":{\"type\":\"enum\",\"name\":\"TeamType\",\"doc\":\"Represents the teams playing Ping Pong\",\"symbols\":[\"BLUE_TEAM\",\"RED_TEAM\"]},\"doc\":\"Represents the team currently with the Ping Pong ball\"},{\"name\":\"teamReceivingBall\",\"type\":\"TeamType\",\"doc\":\"Represents the team receiving the Ping Pong ball\"},{\"name\":\"server\",\"type\":{\"type\":\"enum\",\"name\":\"ServerType\",\"doc\":\"Represents who is serving the Ping Pong ball\",\"symbols\":[\"PLAYER_ONE_SERVICE\",\"PLAYER_TWO_SERVICE\",\"PLAYER_THREE_SERVICE\",\"PLAYER_FOUR_SERVICE\"]},\"doc\":\"Represents who is serving the Ping Pong ball\"},{\"name\":\"color\",\"type\":{\"type\":\"enum\",\"name\":\"ColorType\",\"doc\":\"Represents the possible color of a Ping Pong ball\",\"symbols\":[\"BLACK\",\"RED\",\"BLUE\",\"PURPLE\",\"ORANGE\"]},\"doc\":\"Represents the possible color of a Ping Pong ball\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  @Deprecated public int id;
  /** Represents the team currently with the Ping Pong ball */
  @Deprecated public com.cedrus.patpetillo.springkafkapingpong.avro.TeamType currentTeamWithBall;
  /** Represents the team receiving the Ping Pong ball */
  @Deprecated public com.cedrus.patpetillo.springkafkapingpong.avro.TeamType teamReceivingBall;
  /** Represents who is serving the Ping Pong ball */
  @Deprecated public com.cedrus.patpetillo.springkafkapingpong.avro.ServerType server;
  /** Represents the possible color of a Ping Pong ball */
  @Deprecated public com.cedrus.patpetillo.springkafkapingpong.avro.ColorType color;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public PingPongBallEvent() {}

  /**
   * All-args constructor.
   *
   * @param id The new value for id
   * @param currentTeamWithBall Represents the team currently with the Ping Pong ball
   * @param teamReceivingBall Represents the team receiving the Ping Pong ball
   * @param server Represents who is serving the Ping Pong ball
   * @param color Represents the possible color of a Ping Pong ball
   */
  public PingPongBallEvent(
      java.lang.Integer id,
      com.cedrus.patpetillo.springkafkapingpong.avro.TeamType currentTeamWithBall,
      com.cedrus.patpetillo.springkafkapingpong.avro.TeamType teamReceivingBall,
      com.cedrus.patpetillo.springkafkapingpong.avro.ServerType server,
      com.cedrus.patpetillo.springkafkapingpong.avro.ColorType color) {
    this.id = id;
    this.currentTeamWithBall = currentTeamWithBall;
    this.teamReceivingBall = teamReceivingBall;
    this.server = server;
    this.color = color;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return id;
      case 1:
        return currentTeamWithBall;
      case 2:
        return teamReceivingBall;
      case 3:
        return server;
      case 4:
        return color;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        id = (java.lang.Integer) value$;
        break;
      case 1:
        currentTeamWithBall = (com.cedrus.patpetillo.springkafkapingpong.avro.TeamType) value$;
        break;
      case 2:
        teamReceivingBall = (com.cedrus.patpetillo.springkafkapingpong.avro.TeamType) value$;
        break;
      case 3:
        server = (com.cedrus.patpetillo.springkafkapingpong.avro.ServerType) value$;
        break;
      case 4:
        color = (com.cedrus.patpetillo.springkafkapingpong.avro.ColorType) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   *
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   *
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'currentTeamWithBall' field.
   *
   * @return Represents the team currently with the Ping Pong ball
   */
  public com.cedrus.patpetillo.springkafkapingpong.avro.TeamType getCurrentTeamWithBall() {
    return currentTeamWithBall;
  }

  /**
   * Sets the value of the 'currentTeamWithBall' field. Represents the team currently with the Ping
   * Pong ball
   *
   * @param value the value to set.
   */
  public void setCurrentTeamWithBall(
      com.cedrus.patpetillo.springkafkapingpong.avro.TeamType value) {
    this.currentTeamWithBall = value;
  }

  /**
   * Gets the value of the 'teamReceivingBall' field.
   *
   * @return Represents the team receiving the Ping Pong ball
   */
  public com.cedrus.patpetillo.springkafkapingpong.avro.TeamType getTeamReceivingBall() {
    return teamReceivingBall;
  }

  /**
   * Sets the value of the 'teamReceivingBall' field. Represents the team receiving the Ping Pong
   * ball
   *
   * @param value the value to set.
   */
  public void setTeamReceivingBall(com.cedrus.patpetillo.springkafkapingpong.avro.TeamType value) {
    this.teamReceivingBall = value;
  }

  /**
   * Gets the value of the 'server' field.
   *
   * @return Represents who is serving the Ping Pong ball
   */
  public com.cedrus.patpetillo.springkafkapingpong.avro.ServerType getServer() {
    return server;
  }

  /**
   * Sets the value of the 'server' field. Represents who is serving the Ping Pong ball
   *
   * @param value the value to set.
   */
  public void setServer(com.cedrus.patpetillo.springkafkapingpong.avro.ServerType value) {
    this.server = value;
  }

  /**
   * Gets the value of the 'color' field.
   *
   * @return Represents the possible color of a Ping Pong ball
   */
  public com.cedrus.patpetillo.springkafkapingpong.avro.ColorType getColor() {
    return color;
  }

  /**
   * Sets the value of the 'color' field. Represents the possible color of a Ping Pong ball
   *
   * @param value the value to set.
   */
  public void setColor(com.cedrus.patpetillo.springkafkapingpong.avro.ColorType value) {
    this.color = value;
  }

  /**
   * Creates a new PingPongBallEvent RecordBuilder.
   *
   * @return A new PingPongBallEvent RecordBuilder
   */
  public static com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder
      newBuilder() {
    return new com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder();
  }

  /**
   * Creates a new PingPongBallEvent RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new PingPongBallEvent RecordBuilder
   */
  public static com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder newBuilder(
      com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder other) {
    return new com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder(other);
  }

  /**
   * Creates a new PingPongBallEvent RecordBuilder by copying an existing PingPongBallEvent
   * instance.
   *
   * @param other The existing instance to copy.
   * @return A new PingPongBallEvent RecordBuilder
   */
  public static com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder newBuilder(
      com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent other) {
    return new com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder(other);
  }

  /** RecordBuilder for PingPongBallEvent instances. */
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<PingPongBallEvent>
      implements org.apache.avro.data.RecordBuilder<PingPongBallEvent> {

    private int id;
    /** Represents the team currently with the Ping Pong ball */
    private com.cedrus.patpetillo.springkafkapingpong.avro.TeamType currentTeamWithBall;
    /** Represents the team receiving the Ping Pong ball */
    private com.cedrus.patpetillo.springkafkapingpong.avro.TeamType teamReceivingBall;
    /** Represents who is serving the Ping Pong ball */
    private com.cedrus.patpetillo.springkafkapingpong.avro.ServerType server;
    /** Represents the possible color of a Ping Pong ball */
    private com.cedrus.patpetillo.springkafkapingpong.avro.ColorType color;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(
        com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currentTeamWithBall)) {
        this.currentTeamWithBall = data().deepCopy(fields()[1].schema(), other.currentTeamWithBall);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teamReceivingBall)) {
        this.teamReceivingBall = data().deepCopy(fields()[2].schema(), other.teamReceivingBall);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.server)) {
        this.server = data().deepCopy(fields()[3].schema(), other.server);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.color)) {
        this.color = data().deepCopy(fields()[4].schema(), other.color);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing PingPongBallEvent instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currentTeamWithBall)) {
        this.currentTeamWithBall = data().deepCopy(fields()[1].schema(), other.currentTeamWithBall);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teamReceivingBall)) {
        this.teamReceivingBall = data().deepCopy(fields()[2].schema(), other.teamReceivingBall);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.server)) {
        this.server = data().deepCopy(fields()[3].schema(), other.server);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.color)) {
        this.color = data().deepCopy(fields()[4].schema(), other.color);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return The value.
     */
    public java.lang.Integer getId() {
      return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value The value of 'id'.
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder setId(
        int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'id' field has been set.
     *
     * @return True if the 'id' field has been set, false otherwise.
     */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'id' field.
     *
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'currentTeamWithBall' field. Represents the team currently with the
     * Ping Pong ball
     *
     * @return The value.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.TeamType getCurrentTeamWithBall() {
      return currentTeamWithBall;
    }

    /**
     * Sets the value of the 'currentTeamWithBall' field. Represents the team currently with the
     * Ping Pong ball
     *
     * @param value The value of 'currentTeamWithBall'.
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder
        setCurrentTeamWithBall(com.cedrus.patpetillo.springkafkapingpong.avro.TeamType value) {
      validate(fields()[1], value);
      this.currentTeamWithBall = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'currentTeamWithBall' field has been set. Represents the team currently
     * with the Ping Pong ball
     *
     * @return True if the 'currentTeamWithBall' field has been set, false otherwise.
     */
    public boolean hasCurrentTeamWithBall() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'currentTeamWithBall' field. Represents the team currently with the
     * Ping Pong ball
     *
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder
        clearCurrentTeamWithBall() {
      currentTeamWithBall = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'teamReceivingBall' field. Represents the team receiving the Ping Pong
     * ball
     *
     * @return The value.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.TeamType getTeamReceivingBall() {
      return teamReceivingBall;
    }

    /**
     * Sets the value of the 'teamReceivingBall' field. Represents the team receiving the Ping Pong
     * ball
     *
     * @param value The value of 'teamReceivingBall'.
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder
        setTeamReceivingBall(com.cedrus.patpetillo.springkafkapingpong.avro.TeamType value) {
      validate(fields()[2], value);
      this.teamReceivingBall = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'teamReceivingBall' field has been set. Represents the team receiving the
     * Ping Pong ball
     *
     * @return True if the 'teamReceivingBall' field has been set, false otherwise.
     */
    public boolean hasTeamReceivingBall() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'teamReceivingBall' field. Represents the team receiving the Ping
     * Pong ball
     *
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder
        clearTeamReceivingBall() {
      teamReceivingBall = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'server' field. Represents who is serving the Ping Pong ball
     *
     * @return The value.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.ServerType getServer() {
      return server;
    }

    /**
     * Sets the value of the 'server' field. Represents who is serving the Ping Pong ball
     *
     * @param value The value of 'server'.
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder setServer(
        com.cedrus.patpetillo.springkafkapingpong.avro.ServerType value) {
      validate(fields()[3], value);
      this.server = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'server' field has been set. Represents who is serving the Ping Pong ball
     *
     * @return True if the 'server' field has been set, false otherwise.
     */
    public boolean hasServer() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'server' field. Represents who is serving the Ping Pong ball
     *
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder clearServer() {
      server = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'color' field. Represents the possible color of a Ping Pong ball
     *
     * @return The value.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.ColorType getColor() {
      return color;
    }

    /**
     * Sets the value of the 'color' field. Represents the possible color of a Ping Pong ball
     *
     * @param value The value of 'color'.
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder setColor(
        com.cedrus.patpetillo.springkafkapingpong.avro.ColorType value) {
      validate(fields()[4], value);
      this.color = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'color' field has been set. Represents the possible color of a Ping Pong
     * ball
     *
     * @return True if the 'color' field has been set, false otherwise.
     */
    public boolean hasColor() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'color' field. Represents the possible color of a Ping Pong ball
     *
     * @return This builder.
     */
    public com.cedrus.patpetillo.springkafkapingpong.avro.PingPongBallEvent.Builder clearColor() {
      color = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public PingPongBallEvent build() {
      try {
        PingPongBallEvent record = new PingPongBallEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.currentTeamWithBall =
            fieldSetFlags()[1]
                ? this.currentTeamWithBall
                : (com.cedrus.patpetillo.springkafkapingpong.avro.TeamType)
                    defaultValue(fields()[1]);
        record.teamReceivingBall =
            fieldSetFlags()[2]
                ? this.teamReceivingBall
                : (com.cedrus.patpetillo.springkafkapingpong.avro.TeamType)
                    defaultValue(fields()[2]);
        record.server =
            fieldSetFlags()[3]
                ? this.server
                : (com.cedrus.patpetillo.springkafkapingpong.avro.ServerType)
                    defaultValue(fields()[3]);
        record.color =
            fieldSetFlags()[4]
                ? this.color
                : (com.cedrus.patpetillo.springkafkapingpong.avro.ColorType)
                    defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter WRITER$ =
      new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader READER$ =
      new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
